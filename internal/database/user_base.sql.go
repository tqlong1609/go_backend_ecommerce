// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_base.sql

package database

import (
	"context"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO go_crm_user (
    user_account, user_password, user_salt, user_created_at, user_updated_at
) VALUES (
    $1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
) RETURNING user_id
`

type CreateNewUserParams struct {
	UserAccount  string
	UserPassword string
	UserSalt     string
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createNewUser, arg.UserAccount, arg.UserPassword, arg.UserSalt)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteUserByUserId = `-- name: DeleteUserByUserId :exec
DELETE FROM go_crm_user
WHERE user_id = $1
`

func (q *Queries) DeleteUserByUserId(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserByUserId, userID)
	return err
}

const getUserAccountByUserId = `-- name: GetUserAccountByUserId :one
SELECT user_account
FROM go_crm_user
WHERE user_id = $1
`

func (q *Queries) GetUserAccountByUserId(ctx context.Context, userID int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserAccountByUserId, userID)
	var user_account string
	err := row.Scan(&user_account)
	return user_account, err
}

const updateUserPasswordByUserId = `-- name: UpdateUserPasswordByUserId :exec
UPDATE go_crm_user
SET user_password = $2,
    user_salt = $3,
    user_updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type UpdateUserPasswordByUserIdParams struct {
	UserID       int32
	UserPassword string
	UserSalt     string
}

func (q *Queries) UpdateUserPasswordByUserId(ctx context.Context, arg UpdateUserPasswordByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPasswordByUserId, arg.UserID, arg.UserPassword, arg.UserSalt)
	return err
}
