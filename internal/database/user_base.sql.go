// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_base.sql

package database

import (
	"context"
	"database/sql"
)

const addUserInfo = `-- name: AddUserInfo :one
INSERT INTO user_base (
  user_account, user_password, user_salt, user_login_time, user_logout_time, user_login_ip, user_created_at, user_updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, NOW(), NOW()
)
RETURNING user_id, user_account, user_password, user_salt, user_login_time, user_logout_time, user_login_ip, user_created_at, user_updated_at
`

type AddUserInfoParams struct {
	UserAccount    string
	UserPassword   string
	UserSait       string
	UserLoginTime  sql.NullTime
	UserLogoutTime sql.NullTime
	UserLoginIp    sql.NullString
}

func (q *Queries) AddUserInfo(ctx context.Context, arg AddUserInfoParams) (UserBase, error) {
	row := q.db.QueryRowContext(ctx, addUserInfo,
		arg.UserAccount,
		arg.UserPassword,
		arg.UserSait,
		arg.UserLoginTime,
		arg.UserLogoutTime,
		arg.UserLoginIp,
	)
	var i UserBase
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserPassword,
		&i.UserSait,
		&i.UserLoginTime,
		&i.UserLogoutTime,
		&i.UserLoginIp,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const changePasswordUser = `-- name: ChangePasswordUser :exec
UPDATE user_base
SET 
  user_password = $2,
  user_updated_at = NOW()
WHERE user_id = $1
`

type ChangePasswordUserParams struct {
	UserID       int32
	UserPassword string
}

func (q *Queries) ChangePasswordUser(ctx context.Context, arg ChangePasswordUserParams) error {
	_, err := q.db.ExecContext(ctx, changePasswordUser, arg.UserID, arg.UserPassword)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT user_id, user_account, user_password, user_salt, user_login_time, user_logout_time, user_login_ip, user_created_at, user_updated_at
FROM user_base
WHERE user_account = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, userAccount string) (UserBase, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, userAccount)
	var i UserBase
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserPassword,
		&i.UserSait,
		&i.UserLoginTime,
		&i.UserLogoutTime,
		&i.UserLoginIp,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT user_id, user_account, user_password, user_salt, user_login_time, user_logout_time, user_login_ip, user_created_at, user_updated_at
FROM user_base
WHERE user_id = $1
`

func (q *Queries) FindUserById(ctx context.Context, userID int32) (UserBase, error) {
	row := q.db.QueryRowContext(ctx, findUserById, userID)
	var i UserBase
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserPassword,
		&i.UserSait,
		&i.UserLoginTime,
		&i.UserLogoutTime,
		&i.UserLoginIp,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const updateUserInfo = `-- name: UpdateUserInfo :exec
UPDATE user_base
SET 
  user_salt = $2,
  user_login_time = $3,
  user_logout_time = $4,
  user_login_ip = $5,
  user_updated_at = NOW()
WHERE user_id = $1
`

type UpdateUserInfoParams struct {
	UserID         int32
	UserSait       string
	UserLoginTime  sql.NullTime
	UserLogoutTime sql.NullTime
	UserLoginIp    sql.NullString
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateUserInfo,
		arg.UserID,
		arg.UserSait,
		arg.UserLoginTime,
		arg.UserLogoutTime,
		arg.UserLoginIp,
	)
	return err
}
