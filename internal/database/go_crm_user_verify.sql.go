// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: go_crm_user_verify.sql

package database

import (
	"context"
	"database/sql"
)

const createOTP = `-- name: CreateOTP :one
INSERT INTO go_crm_user_verify (
  verify_otp, verify_key, verify_key_hash, verify_type, is_verified, is_deleted, verify_created, verify_updated
) VALUES (
  $1, $2, $3, $4, 0, 0, NOW(), NOW()
)
RETURNING verify_id, verify_otp, verify_key, verify_key_hash, verify_type, is_verified, is_deleted, verify_created, verify_updated
`

type CreateOTPParams struct {
	VerifyOtp     string
	VerifyKey     string
	VerifyKeyHash string
	VerifyType    sql.NullInt32
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) (GoCrmUserVerify, error) {
	row := q.db.QueryRowContext(ctx, createOTP,
		arg.VerifyOtp,
		arg.VerifyKey,
		arg.VerifyKeyHash,
		arg.VerifyType,
	)
	var i GoCrmUserVerify
	err := row.Scan(
		&i.VerifyID,
		&i.VerifyOtp,
		&i.VerifyKey,
		&i.VerifyKeyHash,
		&i.VerifyType,
		&i.IsVerified,
		&i.IsDeleted,
		&i.VerifyCreated,
		&i.VerifyUpdated,
	)
	return i, err
}

const getInfoOTP = `-- name: GetInfoOTP :one
SELECT verify_id, verify_otp, verify_key, verify_key_hash, verify_type, is_verified, is_deleted, verify_created, verify_updated
FROM go_crm_user_verify
WHERE verify_otp = $1 AND is_deleted = 0
LIMIT 1
`

func (q *Queries) GetInfoOTP(ctx context.Context, verifyOtp string) (GoCrmUserVerify, error) {
	row := q.db.QueryRowContext(ctx, getInfoOTP, verifyOtp)
	var i GoCrmUserVerify
	err := row.Scan(
		&i.VerifyID,
		&i.VerifyOtp,
		&i.VerifyKey,
		&i.VerifyKeyHash,
		&i.VerifyType,
		&i.IsVerified,
		&i.IsDeleted,
		&i.VerifyCreated,
		&i.VerifyUpdated,
	)
	return i, err
}

const getValidOTP = `-- name: GetValidOTP :one
SELECT verify_id, verify_otp, verify_key, verify_key_hash, verify_type, is_verified, is_deleted, verify_created, verify_updated
FROM go_crm_user_verify
WHERE verify_otp = $1 AND is_verified = 0 AND is_deleted = 0
LIMIT 1
`

func (q *Queries) GetValidOTP(ctx context.Context, verifyOtp string) (GoCrmUserVerify, error) {
	row := q.db.QueryRowContext(ctx, getValidOTP, verifyOtp)
	var i GoCrmUserVerify
	err := row.Scan(
		&i.VerifyID,
		&i.VerifyOtp,
		&i.VerifyKey,
		&i.VerifyKeyHash,
		&i.VerifyType,
		&i.IsVerified,
		&i.IsDeleted,
		&i.VerifyCreated,
		&i.VerifyUpdated,
	)
	return i, err
}

const updateVerifyStatus = `-- name: UpdateVerifyStatus :exec
UPDATE go_crm_user_verify
SET is_verified = $2, verify_updated = NOW()
WHERE verify_otp = $1 AND is_deleted = 0
`

type UpdateVerifyStatusParams struct {
	VerifyOtp  string
	IsVerified sql.NullInt32
}

func (q *Queries) UpdateVerifyStatus(ctx context.Context, arg UpdateVerifyStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateVerifyStatus, arg.VerifyOtp, arg.IsVerified)
	return err
}
