// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_token.sql

package database

import (
	"context"
	"time"
)

const addRefreshToken = `-- name: AddRefreshToken :exec
INSERT INTO user_token (
  user_id, refresh_token, expires_at
) VALUES (
  $1, $2, $3
)
ON CONFLICT (refresh_token) DO NOTHING
`

type AddRefreshTokenParams struct {
	UserID       int32
	RefreshToken string
	ExpiresAt    time.Time
}

func (q *Queries) AddRefreshToken(ctx context.Context, arg AddRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, addRefreshToken, arg.UserID, arg.RefreshToken, arg.ExpiresAt)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM user_token
WHERE refresh_token = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, refreshToken string) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshToken, refreshToken)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT user_id, refresh_token, expires_at
FROM user_token
WHERE refresh_token = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, refreshToken string) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, refreshToken)
	var i UserToken
	err := row.Scan(&i.UserID, &i.RefreshToken, &i.ExpiresAt)
	return i, err
}
